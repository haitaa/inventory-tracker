generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          BigInt     @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  parentId    BigInt?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToSubcategory")
  products    Product[]
}

model Brand {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  logo        String?
  description String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Supplier {
  id          BigInt    @id @default(autoincrement())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model ProductAttribute {
  id        BigInt                  @id @default(autoincrement())
  name      String
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  values    ProductAttributeValue[]
}

model ProductAttributeValue {
  id          BigInt                    @id @default(autoincrement())
  value       String
  attributeId BigInt
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  attribute   ProductAttribute          @relation(fields: [attributeId], references: [id])
  products    ProductToAttributeValue[]
}

model ProductToAttributeValue {
  productId        BigInt
  attributeValueId BigInt
  productVariantId BigInt?
  attributeValue   ProductAttributeValue @relation(fields: [attributeValueId], references: [id])
  product          Product               @relation(fields: [productId], references: [id])
  ProductVariant   ProductVariant?       @relation(fields: [productVariantId], references: [id])

  @@id([productId, attributeValueId])
}

model Tag {
  id       BigInt    @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  products Product[] @relation("ProductToTag")
}

model Product {
  id                   BigInt                    @id @default(autoincrement())
  userId               BigInt?
  name                 String
  sku                  String                    @unique
  price                Float
  cost_price           Float?
  description          String?
  barcode              String?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  imageUrl             String?
  brandId              BigInt?
  categoryId           BigInt?
  compareAtPrice       Float?
  featured             Boolean                   @default(false)
  gtin                 String?
  height               Float?
  isbn                 String?
  length               Float?
  maxStockLevel        Int?
  metaDescription      String?
  metaKeywords         String?
  metaTitle            String?
  minStockLevel        Int?
  mpn                  String?
  short_description    String?
  slug                 String?                   @unique
  status               ProductStatus             @default(ACTIVE)
  supplierId           BigInt?
  taxRate              Float?
  taxable              Boolean                   @default(true)
  visibility           ProductVisibility         @default(VISIBLE)
  weight               Float?
  width                Float?
  InventoryTransaction InventoryTransaction[]
  brand                Brand?                    @relation(fields: [brandId], references: [id])
  category             Category?                 @relation(fields: [categoryId], references: [id])
  supplier             Supplier?                 @relation(fields: [supplierId], references: [id])
  user                 User?                     @relation(fields: [userId], references: [id])
  additionalImages     ProductImage[]
  relatedProducts      ProductRelation[]         @relation("ProductToRelated")
  relatingProducts     ProductRelation[]         @relation("RelatedToProduct")
  attributeValues      ProductToAttributeValue[]
  variants             ProductVariant[]
  Stock                Stock[]
  tags                 Tag[]                     @relation("ProductToTag")
}

model ProductImage {
  id        BigInt   @id @default(autoincrement())
  productId BigInt
  url       String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id              BigInt                    @id @default(autoincrement())
  productId       BigInt
  sku             String                    @unique
  price           Float?
  cost_price      Float?
  imageUrl        String?
  stock           Int                       @default(0)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  attributeValues ProductToAttributeValue[]
  product         Product                   @relation(fields: [productId], references: [id])
}

model ProductRelation {
  productId        BigInt
  relatedProductId BigInt
  type             RelationType @default(RELATED)
  product          Product      @relation("ProductToRelated", fields: [productId], references: [id])
  relatedProduct   Product      @relation("RelatedToProduct", fields: [relatedProductId], references: [id])

  @@id([productId, relatedProductId])
}

model InventoryTransaction {
  id          BigInt          @id @default(autoincrement())
  userId      BigInt?
  productId   BigInt
  warehouseId BigInt
  type        TransactionType
  quantity    Int
  createdAt   DateTime        @default(now())
  product     Product         @relation(fields: [productId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])
  warehouse   Warehouse       @relation(fields: [warehouseId], references: [id])
}

model Stock {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt?
  productId   BigInt
  warehouseId BigInt
  quantity    Int       @default(0)
  version     Int       @default(1)
  product     Product   @relation(fields: [productId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
}

model Warehouse {
  id                   BigInt                 @id @default(autoincrement())
  name                 String?
  code                 String?
  address              String?
  capacity             Int?
  city                 String?
  country              String?
  district             String?
  email                String?
  managerName          String?
  phone                String?
  postalCode           String?
  usedCapacity         Int?
  InventoryTransaction InventoryTransaction[]
  Stock                Stock[]
}

model User {
  id                    BigInt                 @id @default(autoincrement())
  email                 String                 @unique
  username              String
  password              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  communicationLogs     CommunicationLog[]
  customers             Customer[]
  inventoryTransactions InventoryTransaction[]
  orders                Order[]
  orderLogs             OrderLog[]
  products              Product[]
  stock                 Stock[]
}

model Customer {
  id                BigInt               @id @default(autoincrement())
  userId            BigInt
  firstName         String
  lastName          String
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  notes             String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  acquisitionSource String?
  birthDate         DateTime?
  companyName       String?
  emailConsent      Boolean              @default(false)
  lifetimeValue     Float?
  phoneConsent      Boolean              @default(false)
  preferredChannel  String?              @default("EMAIL")
  rfmData           Json?
  segment           CustomerSegmentType?
  smsConsent        Boolean              @default(false)
  tags              String[]
  taxId             String?
  communicationLogs CommunicationLog[]
  user              User                 @relation(fields: [userId], references: [id])
  orders            Order[]

  @@unique([userId, email])
}

model CommunicationLog {
  id         BigInt   @id @default(autoincrement())
  customerId BigInt
  userId     BigInt
  type       String
  subject    String
  content    String
  date       DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([customerId])
}

model Order {
  id              BigInt          @id @default(autoincrement())
  orderNumber     String          @unique
  userId          BigInt
  customerId      BigInt
  status          OrderStatusType @default(PENDING)
  paymentType     PaymentType     @default(CASH)
  paymentStatus   Boolean         @default(false)
  shippingFee     Float?
  tax             Float?
  discount        Float?
  totalAmount     Float
  notes           String?
  shippingAddress String?
  trackingNumber  String?
  carrierName     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  customer        Customer        @relation(fields: [customerId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  items           OrderItem[]
  logs            OrderLog[]
  payments        Payment[]
}

model OrderItem {
  id          BigInt   @id @default(autoincrement())
  orderId     BigInt
  productId   BigInt
  productName String
  productSku  String
  quantity    Int
  unitPrice   Float
  taxRate     Float?
  discount    Float?
  totalPrice  Float
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model OrderLog {
  id        BigInt           @id @default(autoincrement())
  orderId   BigInt
  userId    BigInt
  status    OrderStatusType?
  message   String
  details   String?
  createdAt DateTime         @default(now())
  order     Order            @relation(fields: [orderId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@index([orderId])
}

model Payment {
  id              BigInt            @id @default(autoincrement())
  orderId         BigInt
  amount          Float
  currency        String            @default("TRY")
  paymentMethod   String
  transactionId   String
  transactionDate DateTime
  status          PaymentStatusType @default(PENDING)
  errorMessage    String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  order           Order             @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([transactionId])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum ProductVisibility {
  VISIBLE
  HIDDEN
}

enum RelationType {
  RELATED
  UPSELL
  CROSS_SELL
}

enum TransactionType {
  IN
  OUT
}

enum CustomerSegmentType {
  REGULAR
  VIP
  PREMIUM
  INACTIVE
  NEW
  AT_RISK
}

enum OrderStatusType {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  COMPLETED
  PAID
}

enum PaymentType {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  OTHER
}

enum PaymentStatusType {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Mağaza Oluşturucu Modelleri
model Store {
  id          String      @id @default(uuid())
  name        String
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  pages       StorePage[]
}

model StorePage {
  id              String        @id @default(uuid())
  storeId         String
  title           String
  slug            String
  metaTitle       String?
  metaDescription String?
  isHomePage      Boolean       @default(false)
  isPublished     Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  store           Store         @relation(fields: [storeId], references: [id])
  sections        PageSection[]

  @@unique([storeId, slug])
}

model Component {
  id          String             @id @default(uuid())
  name        String
  description String?
  tags        String[]
  category    String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  versions    ComponentVersion[]
}

model ComponentVersion {
  id          String        @id @default(uuid())
  componentId String
  version     String
  code        String
  schema      Json?
  preview     String?
  isActive    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  component   Component     @relation(fields: [componentId], references: [id])
  sections    PageSection[]
}

model PageSection {
  id                 String           @id @default(uuid())
  pageId             String
  componentVersionId String
  name               String?
  props              Json?
  order              Int              @default(0)
  parentSectionId    String?
  containerSettings  Json?
  styleOverrides     Json?
  isVisible          Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  page               StorePage        @relation(fields: [pageId], references: [id])
  componentVersion   ComponentVersion @relation(fields: [componentVersionId], references: [id])
  parentSection      PageSection?     @relation("SectionToSubsection", fields: [parentSectionId], references: [id])
  childSections      PageSection[]    @relation("SectionToSubsection")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id          BigInt     @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  parentId    BigInt?
  parent      Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToSubcategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Brand {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  logo        String?
  description String?
  website     String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Supplier {
  id          BigInt    @id @default(autoincrement())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  website     String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductAttribute {
  id        BigInt                  @id @default(autoincrement())
  name      String
  values    ProductAttributeValue[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model ProductAttributeValue {
  id          BigInt                    @id @default(autoincrement())
  value       String
  attributeId BigInt
  attribute   ProductAttribute          @relation(fields: [attributeId], references: [id])
  products    ProductToAttributeValue[]
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
}

model ProductToAttributeValue {
  productId        BigInt
  attributeValueId BigInt
  product          Product               @relation(fields: [productId], references: [id])
  attributeValue   ProductAttributeValue @relation(fields: [attributeValueId], references: [id])
  ProductVariant   ProductVariant?       @relation(fields: [productVariantId], references: [id])
  productVariantId BigInt?

  @@id([productId, attributeValueId])
}

model Tag {
  id       BigInt    @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Product {
  id                BigInt         @id @default(autoincrement())
  userId            BigInt?
  user              User?          @relation(fields: [userId], references: [id])
  name              String
  slug              String?        @unique
  sku               String         @unique
  price             Float
  cost_price        Float?
  compareAtPrice    Float? // Eski/liste fiyatı (indirim göstermek için)
  description       String?
  short_description String? // Kısa açıklama
  barcode           String?
  imageUrl          String?
  additionalImages  ProductImage[] // Ek ürün resimleri

  // Kategori ilişkisi
  categoryId BigInt?
  category   Category? @relation(fields: [categoryId], references: [id])

  // Marka ilişkisi
  brandId BigInt?
  brand   Brand?  @relation(fields: [brandId], references: [id])

  // Tedarikçi ilişkisi
  supplierId BigInt?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  // Fiziksel özellikler
  weight Float? // ağırlık (gr)
  width  Float? // genişlik (cm)
  height Float? // yükseklik (cm)
  length Float? // uzunluk (cm)

  // Stok yönetimi
  minStockLevel Int? // Minimum stok seviyesi (uyarı için)
  maxStockLevel Int? // Maksimum stok seviyesi

  // Durum
  status     ProductStatus     @default(ACTIVE)
  visibility ProductVisibility @default(VISIBLE)
  featured   Boolean           @default(false)

  // Vergi
  taxable Boolean @default(true)
  taxRate Float?

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  // Barkod seçenekleri
  isbn String? // Kitaplar için
  mpn  String? // Üretici parça numarası
  gtin String? // Global Ticaret Ürün Numarası

  // İlişkiler
  tags             Tag[]
  attributeValues  ProductToAttributeValue[]
  variants         ProductVariant[]
  relatedProducts  ProductRelation[]         @relation("ProductToRelated")
  relatingProducts ProductRelation[]         @relation("RelatedToProduct")

  // Mevcut ilişkiler
  InventoryTransaction InventoryTransaction[]
  Stock                Stock[]

  // Zaman damgaları
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        BigInt   @id @default(autoincrement())
  productId BigInt
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id              BigInt                    @id @default(autoincrement())
  productId       BigInt
  product         Product                   @relation(fields: [productId], references: [id])
  sku             String                    @unique
  price           Float?
  cost_price      Float?
  imageUrl        String?
  stock           Int                       @default(0)
  attributeValues ProductToAttributeValue[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ProductRelation {
  productId        BigInt
  relatedProductId BigInt
  product          Product      @relation("ProductToRelated", fields: [productId], references: [id])
  relatedProduct   Product      @relation("RelatedToProduct", fields: [relatedProductId], references: [id])
  type             RelationType @default(RELATED)

  @@id([productId, relatedProductId])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum ProductVisibility {
  VISIBLE
  HIDDEN
}

enum RelationType {
  RELATED
  UPSELL
  CROSS_SELL
}

model InventoryTransaction {
  id          BigInt          @id @default(autoincrement())
  userId      BigInt?
  user        User?           @relation(fields: [userId], references: [id])
  productId   BigInt
  product     Product         @relation(fields: [productId], references: [id])
  warehouseId BigInt
  warehouse   Warehouse       @relation(fields: [warehouseId], references: [id])
  type        TransactionType
  quantity    Int
  createdAt   DateTime        @default(now())
}

model Stock {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt?
  user        User?     @relation(fields: [userId], references: [id])
  productId   BigInt
  product     Product   @relation(fields: [productId], references: [id])
  warehouseId BigInt
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  quantity    Int       @default(0)
  version     Int       @default(1)

  @@unique([productId, warehouseId])
}

enum TransactionType {
  IN
  OUT
}

model Warehouse {
  id                   BigInt                 @id @default(autoincrement())
  name                 String?
  code                 String?
  address              String?
  city                 String?
  district             String?
  postalCode           String?
  country              String?
  phone                String?
  email                String?
  managerName          String?
  capacity             Int?
  usedCapacity         Int?
  InventoryTransaction InventoryTransaction[]
  Stock                Stock[]
}

model User {
  id                    BigInt                 @id @default(autoincrement())
  email                 String                 @unique
  username              String
  password              String
  products              Product[]
  inventoryTransactions InventoryTransaction[]
  stock                 Stock[]
  orders                Order[] // Kullanıcının siparişleri
  customers             Customer[] // Kullanıcının müşterileri
  orderLogs             OrderLog[] // Kullanıcının sipariş logları
  communicationLogs     CommunicationLog[] // Kullanıcının iletişim kayıtları
  stores                Store[] // Kullanıcının mağazaları

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Müşteri segment türleri için enum
enum CustomerSegmentType {
  REGULAR // Standart müşteri
  VIP // VIP müşteri
  PREMIUM // Premium müşteri
  INACTIVE // Pasif müşteri
  NEW // Yeni müşteri
  AT_RISK // Risk altındaki müşteri
}

// Müşteri modeli
model Customer {
  id         BigInt  @id @default(autoincrement())
  userId     BigInt // Hangi kullanıcıya ait müşteri
  user       User    @relation(fields: [userId], references: [id])
  firstName  String
  lastName   String
  email      String?
  phone      String?
  address    String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  notes      String?
  orders     Order[] // Müşterinin siparişleri

  // CRM Özellikleri
  segment           CustomerSegmentType? // Müşteri segmenti
  lifetimeValue     Float? // Yaşam boyu değeri
  rfmData           Json? // RFM analiz sonuçları
  communicationLogs CommunicationLog[] // İletişim kayıtları
  tags              String[] // Müşteri etiketleri
  companyName       String? // Şirket adı (B2B müşteriler için)
  taxId             String? // Vergi/TC kimlik numarası
  birthDate         DateTime? // Doğum tarihi
  emailConsent      Boolean              @default(false) // E-posta izni
  smsConsent        Boolean              @default(false) // SMS izni
  phoneConsent      Boolean              @default(false) // Telefon izni
  preferredChannel  String?              @default("EMAIL") // Tercih edilen iletişim kanalı
  acquisitionSource String? // Müşteri edinme kaynağı

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, email])
}

// İletişim kayıtları modeli
model CommunicationLog {
  id         BigInt   @id @default(autoincrement())
  customerId BigInt // Hangi müşteriye ait
  customer   Customer @relation(fields: [customerId], references: [id])
  userId     BigInt // İşlemi yapan kullanıcı
  user       User     @relation(fields: [userId], references: [id])
  type       String // İletişim türü: EMAIL, SMS, PHONE, MEETING, OTHER
  subject    String // Konu
  content    String // İçerik
  date       DateTime @default(now()) // İletişim tarihi

  @@index([customerId])
}

// Sipariş durumu için enum
enum OrderStatusType {
  PENDING // Beklemede
  PROCESSING // İşleniyor
  PAID // Ödendi
  SHIPPED // Kargoya verildi
  DELIVERED // Teslim edildi
  CANCELLED // İptal edildi
  RETURNED // İade edildi
  COMPLETED // Tamamlandı
}

// Ödeme tipi için enum
enum PaymentType {
  CASH // Nakit
  CREDIT_CARD // Kredi kartı
  BANK_TRANSFER // Banka havalesi
  OTHER // Diğer
}

// Sipariş modeli
model Order {
  id            BigInt          @id @default(autoincrement())
  orderNumber   String          @unique // Tekil sipariş numarası
  userId        BigInt // Siparişi oluşturan kullanıcı
  user          User            @relation(fields: [userId], references: [id])
  customerId    BigInt // Müşteri
  customer      Customer        @relation(fields: [customerId], references: [id])
  status        OrderStatusType @default(PENDING) // Sipariş durumu
  paymentType   PaymentType     @default(CASH) // Ödeme tipi
  paymentStatus Boolean         @default(false) // Ödeme durumu
  shippingFee   Float? // Kargo ücreti
  tax           Float? // Vergi tutarı
  discount      Float? // İndirim tutarı
  totalAmount   Float // Toplam tutar
  notes         String? // Notlar
  items         OrderItem[] // Sipariş kalemleri
  logs          OrderLog[] // Sipariş logları
  payments      Payment[] // Siparişin ödemeleri

  // Kargo bilgileri
  shippingAddress String?
  trackingNumber  String?
  carrierName     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Sipariş kalemi modeli
model OrderItem {
  id          BigInt  @id @default(autoincrement())
  orderId     BigInt // Hangi siparişe ait
  order       Order   @relation(fields: [orderId], references: [id])
  productId   BigInt // Ürün ID
  productName String // Ürün adı (ürün silinse bile sipariş detayı kalmalı)
  productSku  String // Ürün SKU
  quantity    Int // Adet
  unitPrice   Float // Birim fiyat
  taxRate     Float? // Vergi oranı
  discount    Float? // İndirim tutarı
  totalPrice  Float // Toplam fiyat (miktar * birim fiyat)
  notes       String? // Özel notlar

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

// Sipariş log modeli - sipariş durumu değişikliklerini ve önemli işlemleri kaydeder
model OrderLog {
  id        BigInt           @id @default(autoincrement())
  orderId   BigInt // Hangi siparişe ait
  order     Order            @relation(fields: [orderId], references: [id])
  userId    BigInt // İşlemi yapan kullanıcı
  user      User             @relation(fields: [userId], references: [id])
  status    OrderStatusType? // Yeni durum (eğer durum değiştiyse)
  message   String // Log mesajı
  details   String? // Ek detaylar (JSON olarak saklanabilir)
  createdAt DateTime         @default(now())

  @@index([orderId])
}

// Ödeme durumu için enum
enum PaymentStatusType {
  PENDING // Beklemede
  COMPLETED // Tamamlandı
  FAILED // Başarısız
  CANCELLED // İptal edildi
  REFUNDED // İade edildi
}

// Ödeme modeli
model Payment {
  id              BigInt            @id @default(autoincrement())
  orderId         BigInt // Hangi siparişe ait
  order           Order             @relation(fields: [orderId], references: [id])
  amount          Float // Ödeme tutarı
  currency        String            @default("TRY") // Para birimi
  paymentMethod   String // Ödeme yöntemi (credit_card, bank_transfer, paypal, pos, vs.)
  transactionId   String // İşlem numarası
  transactionDate DateTime // İşlem tarihi
  status          PaymentStatusType @default(PENDING) // Ödeme durumu
  errorMessage    String? // Hata mesajı
  metadata        Json? // Ek bilgiler (JSON olarak saklanır)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([transactionId])
}

// Store modülleri

// Mağaza şablonu (template) modeli
model StoreTemplate {
  id           BigInt   @id @default(autoincrement())
  name         String
  description  String?
  thumbnail    String?
  type         String // "e-commerce", "portfolio", "blog" vb.
  defaultPages Json? // Varsayılan sayfa yapılandırmaları
  components   Json? // Şablonda kullanılabilen bileşenler
  isActive     Boolean  @default(true)
  stores       Store[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Mağaza modeli
model Store {
  id            BigInt        @id @default(autoincrement())
  userId        BigInt
  user          User          @relation(fields: [userId], references: [id])
  name          String
  description   String?
  logo          String?
  favicon       String?
  subdomain     String        @unique // site-adi.envanter-app.com
  domain        String?       @unique // özel alan adı (isteğe bağlı)
  templateId    BigInt
  template      StoreTemplate @relation(fields: [templateId], references: [id])
  customization Json? // Tema özelleştirmeleri
  settings      Json? // Site ayarları
  pages         StorePage[]
  themes        StoreTheme[]
  isActive      Boolean       @default(true)
  isPublished   Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Mağaza sayfası modeli
model StorePage {
  id          BigInt        @id @default(autoincrement())
  storeId     BigInt
  store       Store         @relation(fields: [storeId], references: [id])
  title       String
  slug        String
  content     Json? // Sayfa içeriği ve bileşenleri
  seo         Json? // SEO meta verileri
  sections    PageSection[]
  isHomepage  Boolean       @default(false)
  isPublished Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([storeId, slug])
}

// Bileşen Kategori modeli
model ComponentCategory {
  id          BigInt      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  slug        String      @unique
  components  Component[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Bileşen modeli
model Component {
  id                BigInt             @id @default(autoincrement())
  name              String
  description       String?
  categoryId        BigInt
  category          ComponentCategory  @relation(fields: [categoryId], references: [id])
  type              String // "header", "footer", "hero", "product-card", "text-block" vb.
  thumbnail         String?
  schema            Json // Bileşenin yapılandırma şeması (JSON Schema formatında)
  defaultProps      Json // Varsayılan özellikler
  restrictions      Json? // Kullanım kısıtlamaları
  isGlobal          Boolean            @default(false) // Tüm sayfalarda kullanılabilir mi?
  isActive          Boolean            @default(true)
  componentVersions ComponentVersion[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// Bileşen Versiyon modeli
model ComponentVersion {
  id          BigInt        @id @default(autoincrement())
  componentId BigInt
  component   Component     @relation(fields: [componentId], references: [id])
  version     String // Semantik versiyonlama (örn. "1.0.0")
  template    String // Bileşenin HTML/React template yapısı
  script      String? // Bileşenin JavaScript kodu
  style       String? // Bileşenin CSS kodu
  isActive    Boolean       @default(true)
  sections    PageSection[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([componentId, version])
}

// Sayfa Bölümü modeli
model PageSection {
  id                 BigInt           @id @default(autoincrement())
  pageId             BigInt
  page               StorePage        @relation(fields: [pageId], references: [id])
  componentVersionId BigInt
  componentVersion   ComponentVersion @relation(fields: [componentVersionId], references: [id])
  name               String? // Bölüm adı (opsiyonel)
  props              Json // Bileşene gönderilen özellikler
  order              Int // Sayfadaki sırası
  parentSectionId    BigInt? // Üst bölüm (nested yapılar için)
  parentSection      PageSection?     @relation("SectionToSubsection", fields: [parentSectionId], references: [id])
  childSections      PageSection[]    @relation("SectionToSubsection")
  containerSettings  Json? // Container ayarları (genişlik, margin, padding vb.)
  styleOverrides     Json? // Stil geçersiz kılmaları
  isVisible          Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

// Tema modeli
model StoreTheme {
  id          BigInt   @id @default(autoincrement())
  storeId     BigInt
  store       Store    @relation(fields: [storeId], references: [id])
  name        String
  description String?
  isDefault   Boolean  @default(false)
  variables   Json // Tema değişkenleri (renkler, yazı tipleri vb.)
  settings    Json? // Tema ayarları
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([storeId, name])
}
